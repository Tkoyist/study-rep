// 在promise 出现之前，js 也提供了一些异步代码处理方式的
// 常见的方式就是使用异步回调函数，在异步任务的函数中传入一个回调函数，编写异步代码当异步任务执行完毕拿到数据之后直接调用回调函数执行代码，但是这样也存在一些问题

// 首先就是规范问题，异步代码的交接会显得很困难，其次，异步代码的封装与客户的使用也会变得困难
// 为了解决这个问题，我们需要一个异步解决方案，一个封装好的异步解决方案，在保证规范性的同时，方便用户的使用

// 所以提出了promise ，不论是什么异步任务，都要求其返回promise，我们只要知道返回值是一个promise，就可以直接进行相关操作，没有交接困难和使用困难，而promise的状态是会随着异步任务的执行而改变的，当异步任务执行完毕后，promise会自动调用我们传入的回调，即自动执行我们期望的代码