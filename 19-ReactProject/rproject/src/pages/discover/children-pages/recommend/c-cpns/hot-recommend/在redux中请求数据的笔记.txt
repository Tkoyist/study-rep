在redux 中请求数据

第一步：
  需要有请求数据的接口函数 getHotRecommends 注意这是请求数据的函数，仅仅只用于请求数据，其内部是我们自己封装的request 函数
  所以需要我们在service 文件夹中创建专门的文件用于保存和导出该文件

第二步：
  在reducer 当中创建初始数据，即为defaultState 添加属性hotRecommends:[] 

第三步：
  创建对应的 actionCreator
    - changeHotRecommendsAction
      用于修改redux 当中的hotRecommends 数据的action构造器
      返回一个action对象，该action 对象的type 属性指向可以修改action 的常量
    - getHotRecommendsAction
      用于请求数据的action 构造器，注意与 getHotRecommends 函数区分开，后者是请求数据的函数，前者是创建请求数据的action的action构造器
      返回一个函数，为什么？
      我们预定义的theme 中间件会对action 进行识别，如果传入的action是一个函数而不是一个对象的话，就会直接运行该函数
      在函数内部，我们需要做两件事情，一是使用getHotRecommends 方法请求到数据，二是使用我们定义好的changeHotRecommendsAction action构造器创建修改数据的action，并将其dispatch 将通过网络请求来的数据修改入store 当中
    
第四步：
  在组件函数进行操作
  主要有这些工作
    - 在生命周期函数当中dispatch 请求数据的action，请求到数据，并将数据存入redux（）其实只要dispatch changeHotRecommendsAction 存入store 的操作会由theme 直接帮助changeHotRecommendsAction 完成
      为了能够disptach，所以我们也需要使用useDispatch 在当前组件函数中获取到disptach 函数
    - 现在store 当中已经存储了请求来的数据，但是当前页面是仍然无法使用的，我们还需要从store 当中获取到对应的数据
      使用了useSelecter hook
      该hook 接受一个回调函数作为参数，在特定的时候，hook 会将state 作为参数传入，并调用该回调，得益于redux 的数据源单一性，我们可以通过总的store 的state 访问到各个分 store 当中的数据
