Fiber
  react 16
  js代码是单线程的，而浏览器中存在很多任务与他是同一线程的，其中包括很多耗时操作，可能导致渲染缓慢
  为了解决这个问题出现了Fiber
  react 将所有的协同任务作为一个整体，我们想要整体的执行这些任务是比较耗时的，所以将其分割成为一个个小的Fiber,而这些Fiber与ReactDom树是一一对应的
  在每一帧中，当浏览器将一些必要任务完成之后就依次执行这些Fiber，这样的好处在于，如果在一帧中，我们无法执行完所有的协同任务，无法给出一个完整的页面交由GPU 展示
  那么就根据已经完成的Fiber 展示出已经渲染的部分，然后其余的Fiber 可以等到下一帧中继续完成，与之相对的，没有经过这种处理的情况，就是由于协同任务没有完成，所有的任务都阻塞等待，甚至无法绘制，导致浏览器卡顿
  但是经过Fiber 处理之后，就能极大的减少卡顿的情况
  对了，在浏览器中专门提供了一个接口，左右类似于生命周期函数，即会在特定的时间执行我们预先传入的代码，我们就可以将Fiber 交由这个接口处理，但是该接口存在兼容性问题，所以React自定义了一个功能类似的接口
  综上，Fiber 可以理解为就是一个任务的小分块，这倒是很像计算机组成原理中的一些计算机底层原理的处理

  一定要注意Fiber树 与ReactDom树 是一一对应的，所以我们需要在hook 原理之前先讲Fiber

