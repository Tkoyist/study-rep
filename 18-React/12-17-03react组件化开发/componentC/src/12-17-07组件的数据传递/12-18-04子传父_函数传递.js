/*
  在vue 中，子组件向父组件传递数据是通过emit 函数向外穿透一个事件，由父组件接受到事件之后再对事件进行响应的响应
  过程：
    父组件监听一个特定事件并绑定响应的事件响应函数  - 子组件事件触发 - 调用子组件事件响应函数 - 在子组件事件响应函数中调用$emit函数，并依据需要传入数据 - $emit 函数将对外穿透一个事件，并传出该数据 - 该事件即父组件在调用子组件时便监听的特殊事件 - 父组件通过时时间响应函数拿到数据并执行预设操作

  react
  - 首先不论是vue 还是react ，子传父的通信都是事件型的传递，即将在子组件触发的事件由父组件监听，并由父组件接收到事件并执行响应的函数
    在vue 中是通过子组件向父组件传递事件，由父组件监听并执行对应函数，react 的核心思想一致，不过react 将函数的执行权下放给了子组件，直接将事件响应函数传递给子组件，让子组件执行
*/

import React, { Component } from 'react'

export default class App extends Component {
  constructor(props){
    super(props)
    this.state={
      counter:0
    }
  }

  render() {
    return (
      <div>
        {this.state.counter}

        {/* <Main add={this.add()}/> */}
        {/* 
          这种写法是错误的

          不对！！！！！！，我们即使传入
        */}

        {/* 这才是正确写法 */}
        <Main add={this.add.bind(this)}/>
        <Main add={()=>{this.add()}}/>

        {/* 
          一个箭头函数在代码块中的意义和一个普通函数的引用在本质上是相同的
          即 ()=>{} 在本质上等同于 fun
          而 fun() 则是对一个函数的执行，等同于函数的执行结果，即 (()=>{})() 等同于一个立即执行的箭头函数

          事件响应属性之外的普通属性的{}不接受一个函数，但可以接收一个函数的执行结果（本质上是一个普通数据）

          但事件响应数据只接受一个函数的引用作为属性值，在需要的时候会将内部的代码取出并以函数方式执行

          普通属性会把{}内部代码作为普通的代码块，在需要时执行代码块内部代码获取数据
          而事件响应属性会吧{}内部的代码作为一个函数，以函数的方式进行执行

          即{}内部的代码的处理方式的不同时由指向{} 的属性的性质决定，而不是由{}内部的代码的性质决定

          - 所以我们在传入一个函数给子组件时，需要传入的是函数的引用，便于子组件使用，而不是函数的执行结果，所以不需要括号
          - 而且绑定事件响应函数时，我们绑定的是一个函数的引用，而非一个函数的返回值（除了防抖节流这些特殊情况之外），所以也不需要括号
            * 包括一个箭头函数的定义，本质上也是传入了一个函数（不带括号的函数）而非箭头函数的执行结果
            * 如果事件响应函数需要参数怎么办？
                我们在react 中使用事件响应函数是有一层箭头函数外包装的，我们可以将参数传给箭头函数，再由箭头函数传递给事件响应函数

          - 题外话，刚才想到一个问题，前面使用bind 绑定事件响应函数怎么没有出错
            因为bind 函数本质上是一个类似于防抖节流函数的包装函数，其作用只是对待处理函数进行一些预处理，返回值是处理过后的函数（注意！它处理函数但不运行函数！！！！）
            我们之前认为bind 是为函数绑定一个this 然后借由该this 执行一次函数
            但是它只是对函数进行包装然后将函数返回！！！！！！，并不会调用执行
        */}

        
        {/* <button  o={this.add.bind(this)()}>0000</button> */}
      </div>
    )
  }

  add() {
    this.setState({
      counter:this.state.counter+1
    })
  }
}


class Main extends Component {

  render() {
    let add = this.props.add
    return (
      <div>

        <button onClick={this.props.add}>+</button>
        {/* 经过上面的分析，所以这里的事件响应函数不需要括号 */}
        {/* 
          这里还是有问题，首先就是this 的问题，我们现在接收到的是一个堆内存中的一个独立的函数，react对其调用直接将其this 指定为undefined ，不必多言
          解决：
            - 将传入的函数改变为使用bind() 函数包装过后的函数，这样this 就正确了
            - 传入一个箭头函数，在箭头函数中调用事件响应函数，这样由于箭头函数的特殊性质，this也不会出错
         */}



        {/* <button onClick={this.props.add()}>+</button> */}
      </div>
    )
  }
}


