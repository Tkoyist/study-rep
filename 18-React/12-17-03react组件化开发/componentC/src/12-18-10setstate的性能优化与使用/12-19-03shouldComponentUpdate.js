/**
 * 我们发现，只要我们通过setstate 修改数据，那么都会重新对组件进行渲染
 * 但是存在一种情况，例如我们在state中存储了一些数据，但是这些数据并不会影响到页面更新，或者说这些数据根本没有在页面中进行任何展示
 * 这种情况下，重新使用render 函数进行渲染是没有意义的，但是react 还是会对其进行渲染，这会造成性能的浪费
 * 
 * 所以react 提出了一个生命周期函数shouldComponentUpdate（是否需要更新组件），我们在一个组件中实现该声明周期函数，可以决定当前组件是否需要重新渲染，或者说是否需要渲染
 * 这个函数会被react 传入两个参数 分别代表更新后的props 和更新后的state 分别对应来自父组件的数据和组件自带的数据
 * 我们就可以在函数中拿到更新前后的props 和state 用于判断当前的组件是否需要重新渲染
 * 
 * 例如我们知道那些数据会影响展示，则在shouldComponentUpdate 中进行判断，如果判断到更新前后影响展示的数据发生了改变，那么就返回true 表示需要重新渲染，否则返回false 表示不需要重新渲染
 * 但是虽然这种方式可以提高效率，但是如果每一个组件都进行这种判断，那么工作量就过于巨大了
 * 
 * -- 所以react 推出了一个新的优化方案
 * 如果一个组件存在不影响渲染的数据，我们就使该组件继承自pureComponent 类，那么react 就会自动判断数据更新是否影响到了展示，而自动决定是否需要重新渲染
 * 
 * 它的原理是比较简单的，它会将发生数据改变的组件及其子组件进行一个判断（浅层比较），判断它的子组件的数据是否发生了改变，包括state和props如果没有发生改变，或者说改变不影响渲染，那么那些子组件就不会重新渲染
 * 
 * 
 * 上面的方法只能针对类组件，接下来讨论关于函数式组件的处理
 */